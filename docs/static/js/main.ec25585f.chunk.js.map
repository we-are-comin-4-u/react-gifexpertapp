{"version":3,"sources":["Components/AddCategory.js","helpers/getGifs.js","Components/GifGridItem.js","Components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","catego","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","setTimeout","useFetchGifs","GifExpertApp","categories","ReactDOM","render","document","getElementById"],"mappings":"mMAIaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAE1B,EAAmCC,mBAAS,IAA5C,mBAAOC,EAAP,KAAkBC,EAAlB,KAmBA,OAEG,sBAAMC,SAZY,SAACC,GACnBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAE3BR,GAAc,SAAAS,GAAM,OAAMP,GAAN,mBAAoBO,OACzCN,EAAc,MAOjB,SAEG,uBACAO,KAAO,OACPC,MAAOT,EACPU,SAxBqB,SAACP,GAGzBF,EAAcE,EAAEQ,OAAOF,a,+BCVfG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACfC,EADe,iDACiCC,UAAUH,GAD3C,+DAEFI,MAAMF,GAFJ,cAEfG,EAFe,gBAGAA,EAAKC,OAHL,uBAGdC,EAHc,EAGdA,KACDC,EAAOD,EAAKE,KAAI,SAAAC,GAAO,IAAD,EACzB,MAAO,CACJC,GAAKD,EAAIC,GACTC,MAAOF,EAAIE,MACXV,IAAG,UAAGQ,EAAIG,cAAP,aAAG,EAAYC,iBAAiBZ,QARpB,kBAWdM,GAXc,4CAAH,sDCCRO,EAAc,SAAC,GAAiB,IAAhBH,EAAe,EAAfA,MAAMV,EAAS,EAATA,IAGhC,OACG,sBAAKc,UAAY,yCAAjB,UACG,qBAAKC,IAAOf,EAAKgB,IAAON,IACxB,4BAAIA,QCHAO,EAAU,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAGpB,ECHyB,SAACA,GAE5B,MAA0Bd,mBAAS,CAEhCqB,KAAK,GACLa,SAAQ,IAHX,mBAAOC,EAAP,KAAcC,EAAd,KAiCD,OAxBCC,qBAAU,WAEPxB,EAAQC,GAAUwB,MAAM,SAAAC,GAErBC,YAAW,WAGRJ,EAAS,CACNf,KAAMkB,EACNL,SAAS,MAGb,UAGN,CAACpB,IASGqB,EDhC0BM,CAAa3B,GAA/Ba,EAAZ,EAAON,KAAYa,EAAnB,EAAmBA,QAWrB,OACG,qCACG,oBAAIJ,UAAW,kBAAf,SAAkChB,IAE7BoB,GAAW,mBAAGJ,UAAU,mCAAb,sDAGlB,qBAAKA,UAAY,YAAjB,SAMWH,EAAOJ,KAAI,SAAAC,GAAG,OACX,cAAC,EAAD,eAEOA,GADAA,EAAIC,aE3BnBiB,EAAe,WACzB,MAAoC1C,mBAAS,CAAC,eAA9C,mBAAO2C,EAAP,KAAmB5C,EAAnB,KAOA,OACG,qCACG,8CACA,cAAC,EAAD,CAAaA,cAAgBA,IAC7B,uBAIG,6BAEM4C,EAAWpB,KAAI,SAAAT,GAAQ,OACpB,cAAC,EAAD,CAEAA,SAAWA,GADJA,Y,MCjB5B8B,IAASC,OAEP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.ec25585f.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport PropTypes from 'prop-types';\n// import { GifExpertApp } from '../GifExpertApp'\n\nexport const AddCategory = ({setCategories}) => {\n\n   const [inputValue,setInputValue] = useState('');\n\n   const handleInputChanges = (e) =>{\n\n      // console.log(e.target.value);\n      setInputValue(e.target.value);\n\n   }\n\n   const handleSubmit = (e) =>{\n      e.preventDefault();\n       if(inputValue.trim().length > 2){\n\n          setCategories(catego => [ inputValue,...catego,]);\n         setInputValue('');\n       }\n\n   }\n\n   return (\n      \n      <form onSubmit={handleSubmit}>\n\n         <input \n         type = 'text'\n         value={inputValue}\n         onChange={handleInputChanges}\n         />\n\n      </form>\n         \n      \n   )\n}\n\nAddCategory.propTypes = {\n   setCategories:PropTypes.func.isRequired\n}\n\nexport default AddCategory;","\n export const getGifs = async(category) => {\n   const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(category) }&limit=10&api_key=XF6TE0NcF8oqJH9oz2SGsrXYQdMWIBcc`;\n   const resp = await fetch(url);\n   const {data} = await resp.json();\n   const gifs = data.map(img =>{\n      return {\n         id : img.id,\n         title: img.title,\n         url : img.images?.downsized_medium.url\n      }\n   })\n   return gifs;\n   // setImages(gifs);\n   }","import React from 'react'\n\nexport const GifGridItem = ({title,url}) => {\n\n   // console.log({id,title,url});\n   return (\n      <div className = \"card animate__animated animate__bounce\">\n         <img src = {url} alt = {title}/>\n         <p>{title}</p>\n      </div>\n   )\n}\n","import React from 'react' // { useState,useEffect }\nimport { useFetchGifs } from '../hooks/useFetchGifs'\n// import { getGifs } from '../helpers/GetGifs';\nimport { GifGridItem } from './GifGridItem';\n\nexport const GifGrid = ({category}) => {\n\n   //  const[images,setImages] = useState([])\n     const {data:images,loading} = useFetchGifs(category);\n\n   //   console.log(loading);\n   //   console.log(data);\n   // useEffect(()=>{\n   //    getGifs(category).then(setImages);\n   // },[category]);\n\n   \n      // getGifs();\n\n   return (\n      <>\n         <h3 className =\"animate__fadeIn\">{category}</h3>\n\n            { loading && <p className=\"animate__animated animate__flash\">Loading...üë©‚Äçüíª</p>  }\n\n         \n       <div className = \"card-grid\">\n          {/* <h3>{count}</h3> */}\n         \n            \n            \n               {\n                  images.map(img => ( \n                     <GifGridItem \n                     key = {img.id}//acostumbrate a usar la destructuracion\n                        {...img} //esto es un operador expres hay mucho ejemplos en net\n                     />  \n                  ))\n\n               }\n               \n      </div> \n      </>\n   )\n}\n","import { useEffect, useState } from \"react\"\n\nimport { getGifs } from '../helpers/getGifs';\n\n\n  export const useFetchGifs = (category) => {\n\n   const [state, setState] = useState({\n\n      data:[],\n      loading:true\n\n   })\n\n   \n\n   useEffect(()=>{\n\n      getGifs(category).then( imgs =>{\n\n         setTimeout(()=>{\n\n            \n            setState({\n               data: imgs,\n               loading: false\n            });\n\n         },3000);\n      })      \n\n   },[category])\n\n//    setTimeout(() => {\n//             setState({\n//                data:[1,2,3,4,5,6,7],\n//                loading: false\n//             })\n//          },3000);\n\n  return state;\n\n   }","import React, { useState } from 'react'\nimport { AddCategory } from './Components/AddCategory';\nimport { GifGrid } from './Components/GifGrid';\n \n// const categories = ['One Punch ,', 'Samurai X, ', 'Dragon Ball']\n\n\nexport const GifExpertApp = () => {\n   const [categories, setCategories] = useState(['One Punch ']);\n\n   // const handleAdd = () =>{\n      //  setCategories (['Golden Boy',...categories]);\n      //  setCategories( catego => [...catego,'Superman'] )\n      \n   // }\n   return (\n      <>\n         <h2>GifExpertApp</h2>\n         <AddCategory setCategories ={setCategories}/>\n         <hr/>\n         {/* <button onClick ={handleAdd}>‚úÖ</button> */}\n\n        \n            <ol>\n               {\n                  categories.map(category =>(\n                     <GifGrid \n                     key = {category}\n                     category ={category}\n                     />\n                     ))\n               }\n            </ol>\n         \n\n      </>\n   )\n}\n\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GifExpertApp } from './GifExpertApp';\n\nimport './index.css';\n\n\n// import reportWebVitals from './reportWebVitals';\n\n\nReactDOM.render(\n  \n  <GifExpertApp />,\n  document.getElementById('root')\n  \n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n// reportWebVitals();\n"],"sourceRoot":""}